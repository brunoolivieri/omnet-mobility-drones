[General]
network = mobilityDrones


**.arp.typename = "GlobalArp"
**.netmaskRoutes = ""
*.radioMedium.backgroundNoise.power = -110dBm
*.configurator.config = xmldoc("topology.xml")
*.configurator.addStaticRoutes = false

# app configuration
*.sensor*.numApps = 2
*.sensor*.app[0].typename = "UdpBasicApp"
*.sensor*.app[0].destAddresses = "controller"
*.sensor*.app[0].destPort = 1000
*.sensor*.app[0].sendInterval = 1s
*.sensor*.app[0].startTime = uniform(0s,1s)
*.sensor*.app[0].messageLength = 10Byte
*.sensor*.app[0].packetName = "SensorData"

*.sensor*.app[1].typename = "UdpSink"
*.sensor*.app[1].localPort = 1000

*.controller.numApps = 2
*.controller.app[0].typename = "UdpBasicApp"
*.controller.app[0].destAddresses = "sensor1"
*.controller.app[0].destPort = 1000
*.controller.app[0].sendInterval = 1s
*.controller.app[0].startTime = exponential(1s)
*.controller.app[0].messageLength = 10Byte
*.controller.app[0].packetName = "ControlData"

*.controller.app[1].typename = "UdpSink"
*.controller.app[1].localPort = 1000


# routing table visualization
*.visualizer.*.routingTableVisualizer[0].displayRoutingTables = false
*.visualizer.*.routingTableVisualizer[0].displayRoutesIndividually = false
*.visualizer.*.routingTableVisualizer[0].lineShift = 0
*.visualizer.*.routingTableVisualizer[0].displayLabels = false

# interface table visualization
*.visualizer.*.interfaceTableVisualizer[0].displayInterfaceTables = false

# data link visualization
*.visualizer.*.numDataLinkVisualizers = 2
*.visualizer.*.dataLinkVisualizer[*].displayLinks = true
*.visualizer.*.dataLinkVisualizer[0].nodeFilter = "sensor* or controller"
*.visualizer.*.dataLinkVisualizer[1].*Color = "blue"
*.visualizer.*.dataLinkVisualizer[1].nodeFilter = "sensor* or controller"

# statistic visualization
*.visualizer.*.numStatisticVisualizers = 2
*.visualizer.*.statisticVisualizer[*].zIndex = 1

*.visualizer.*.statisticVisualizer[0].displayStatistics = true
*.visualizer.*.statisticVisualizer[0].signalName = "packetSent"
*.visualizer.*.statisticVisualizer[0].statisticExpression = "count"
*.visualizer.*.statisticVisualizer[0].sourceFilter = "**.controller.udp **.sensor*.udp"
*.visualizer.*.statisticVisualizer[0].format = "sent: %v pks"

*.visualizer.*.statisticVisualizer[1].displayStatistics = true
*.visualizer.*.statisticVisualizer[1].signalName = "packetReceived"
*.visualizer.*.statisticVisualizer[1].statisticExpression = "count"
*.visualizer.*.statisticVisualizer[1].sourceFilter = "**.controller.udp **.sensor*.udp"
*.visualizer.*.statisticVisualizer[1].format = "rcvd: %v pks"





# Original from movement 

# scene visualization
*.visualizer.osgVisualizer.typename = "IntegratedOsgVisualizer"
*.visualizer.osgVisualizer.sceneVisualizer.clearColor = "skyblue"
*.visualizer.osgVisualizer.sceneVisualizer.sceneImage = "showcases/desert"
*.visualizer.osgVisualizer.sceneVisualizer.sceneImageSize = 500m
*.visualizer.osgVisualizer.sceneVisualizer.axisLength = 500m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMinX = -300m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMinY = -300m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMinZ = 0m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMaxX = 300m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMaxY = 300m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMaxZ = 200m

# network node visualization: disable labels
*.visualizer.osgVisualizer.networkNodeVisualizer.displayModuleName = false

# mobility visualization
*.visualizer.*.mobilityVisualizer.displayMobility = true # master switch
*.visualizer.*.mobilityVisualizer.displayPositions = true
*.visualizer.*.mobilityVisualizer.displayOrientations = true
*.visualizer.*.mobilityVisualizer.displayVelocities = true
*.visualizer.*.mobilityVisualizer.displayMovementTrails = true
*.visualizer.*.mobilityVisualizer.animationSpeed = 1

# mobility constraint area
**.constraintAreaMinX = 0m
**.constraintAreaMinY = 0m
**.constraintAreaMinZ = 0m
**.constraintAreaMaxX = 500m
**.constraintAreaMaxY = 500m
**.constraintAreaMaxZ = 100m
# original from 2D: **.updateInterval = 0.1s # test with 0s too, and let getCurrentPosition update the display string from a test module


# no configurator needed (there is no communication between hosts)
# removing due to 802.15.14 **.networkConfiguratorModule = ""


[Config Sensor]
*.sensor1.mobility.offsetY = 0m
*.sensor1.mobility.initialZ = 0m
#*.controller.mobility.initialZ = 0m



[Config Drone]
description = "Random Way point std. w 802154"
*.numHosts = 3
*.host[*].osgModel = "3d/drone.ive.100.scale.0,0,90.rot"

*.host[*].mobility.typename = "RandomWaypointMobility"
*.host[*].mobility.initialX = 5m
*.host[*].mobility.initialY = 5m
*.host[*].mobility.initialZ = 0m
*.host[*].mobility.speed = uniform(10mps,20mps)
**.host*.mobility.initFromDisplayString = false
**.updateInterval = 0.1s # test with 0s too, and let getCurrentPosition update the display string from a test module
#*.host[*].mobility.changeInterval = 1s
#*.host[*].mobility.initialMovementHeading = uniform(0deg, 360deg)
#*.host[*].mobility.initialMovementElevation = uniform(-90deg, 90deg)
#*.host[*].mobility.angleDelta = uniform(-10deg,10deg)
#*.host[*].mobility.rotationAxisAngle = uniform(-10deg,10deg)
#*.host[*].mobility.faceForward = false


## inserting networking
#*.host[*].numApps = 2
#*.host[*].app[0].typename = "UdpBasicApp"
#*.host[*].app[0].destAddresses = "sensor1"
#*.host[*].app[0].destPort = 1000
#*.host[*].app[0].sendInterval = 10s
#*.host[*].app[0].startTime = exponential(1s)
#*.host[*].app[0].messageLength = 10Byte
#*.host[*].app[0].packetName = "DroneData"

#*.host[*].app[1].typename = "UdpSink"
#*.host[*].app[1].localPort = 1000
#############



**.constraintAreaMinZ = 0m







